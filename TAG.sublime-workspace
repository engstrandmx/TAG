{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "// Fill out your copyright notice in the Description page of Project Settings.\n\n#include \"TrollCharacter.h\"\n\nATrollCharacter::ATrollCharacter() {\n\n\t//Create default shape\n\tInteractShape = CreateDefaultSubobject<USphereComponent>(FName(\"Interact Shape\"));\n\tInteractShape->AttachToComponent(GetMesh(), FAttachmentTransformRules::KeepRelativeTransform);\n\n\tbReplicates = true;\n\tAttackCount = 0;\n}\n\n/*\nATrollCharacter::BeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult &SweepResult)\n{\n\n}\n*/\n\nvoid ATrollCharacter::SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)\n{\n\tcheck(PlayerInputComponent);\n\tPlayerInputComponent->BindAction(\"Interact\", IE_Pressed, this, &ATrollCharacter::Interact);\n\tPlayerInputComponent->BindAction(\"Interact\", IE_Released, this, &ATrollCharacter::StopInteract);\n\n\tSuper::SetupPlayerInputComponent(PlayerInputComponent);\n\n}\n\nvoid ATrollCharacter::StopInteract() {\n\n\tif (Role < ROLE_Authority) {\n\t\tServerStopInteract();\n\t}\n\telse {\n\t\tbIsPunching = false;\n\t\t//GetWorld()->GetTimerManager().ClearTimer(InteractHandle);\n\t}\n\n}\n\nvoid ATrollCharacter::ServerStopInteract_Implementation()\n{\n\tStopInteract();\n}\n\nbool ATrollCharacter::ServerStopInteract_Validate()\n{\n\treturn true;\n}\n\nvoid ATrollCharacter::Interact()\n{\n\tif (Role < ROLE_Authority) {\n\t\tServerInteract();\n\t}\n\telse {\n\t\tbPunchTimerStarted = true;\n\n\t\tif (!bIsPunching) {\n\t\t\tOnAttack();\n\t\t}\n\t\tbIsPunching = true;\n\t}\n}\n\nvoid ATrollCharacter::DelayedInteract()\n{\n\tSimulateInteractFX();\n\n\tTSubclassOf <class UDamageType> DamageTypeClass;\n\tconst TArray<AActor*> IgnoreActors;\n\n\tUGameplayStatics::ApplyRadialDamage(GetWorld(), Damage, GetActorForwardVector() * 100.f + GetActorLocation(), DamageRadius, DamageTypeClass, IgnoreActors, this, GetController());\n\n\tbPunchTimerStarted = false;\n}\n\nvoid ATrollCharacter::ServerDealDamage_Implementation(){\n\tDealDamage();\n}\n\nbool ATrollCharacter::ServerDealDamage_Validate() {\n\treturn true;\n}\n\nvoid ATrollCharacter::DealDamage() {\n\tif (Role < ROLE_Authority) {\n\t\tServerDealDamage();\n\t}\n\telse {\n\t\tAttackCount++;\n\n\t\tSimulateInteractFX();\n\n\t\tTSubclassOf <class UDamageType> DamageTypeClass;\n\t\tconst TArray<AActor*> IgnoreActors;\n\n\t\tUGameplayStatics::ApplyRadialDamage(GetWorld(), Damage, GetActorForwardVector() * 100.f + GetActorLocation(), DamageRadius, DamageTypeClass, IgnoreActors, this, GetController());\n\n\t\tif (AttackCount >= 2) {\n\t\t\tStopInteract();\n\t\t}\n\t}\n\n}\n\nvoid ATrollCharacter::ServerInteract_Implementation()\n{\n\tInteract();\n}\n\nbool ATrollCharacter::ServerInteract_Validate()\n{\n\treturn true;\n}\n\nvoid ATrollCharacter::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const\n{\n\tSuper::GetLifetimeReplicatedProps(OutLifetimeProps);\n\n\tDOREPLIFETIME(ATrollCharacter, bIsPunching);\n}\n\nvoid ATrollCharacter::OnRep_IsPunching()\n{\n\n}\n\nvoid ATrollCharacter::SimulateInteractFX_Implementation()\n{\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), DamageParticles, GetActorForwardVector() * 100.f + GetActorLocation(), GetActorRotation(), true);\n}\n\nvoid ATrollCharacter::ChangeState(State toState) \n{\n\tCurrentState = toState;\n\n\t\n}\n",
			"file": "Source/TAG/TrollCharacter.cpp",
			"file_size": 3329,
			"file_write_time": 131502155600193554,
			"settings":
			{
				"buffer_size": 3192,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Source/TAG/TrollCharacter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3192,
						"regions":
						{
						},
						"selection":
						[
							[
								3186,
								3186
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "TAG.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
